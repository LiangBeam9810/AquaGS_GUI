#eval(parse(text = pama))
rep_accuracyA[r, i] <- (cor(Y_A, val_pheno, use = "complete"))/sqrt(h2)
numerator_A <- sum((Y_A-mean(Y_A))*(val_pheno-mean(val_pheno)))
denomirator_A <- sum((Y_A-mean(Y_A))^2)
reg_A[r, i] <- numerator_A/denomirator_A
}
}
meanaccuracy  <- cbind(mean(apply(rep_accuracyA,2,mean)),mean(apply(rep_accuracyA,2,sd)))
###交叉验证
rep=5
fold_num <- 5
pheno <- copy(data)
y <- copy(pheno)
rep_accuracyA <-  matrix(nrow=fold_num, ncol=rep)
rep_accuracyG <-  matrix(nrow=fold_num, ncol=rep)
reg_A <- matrix(nrow=fold_num, ncol=rep)
reg_G <- matrix(nrow=fold_num, ncol=rep)
for(i in 1:rep) {
animal_pos <- seq(nrow(pheno))
s = matrix(sample(animal_pos, (floor(nrow(pheno) * (1/fold_num)) * fold_num)), ncol = fold_num)
for (r in 1:fold_num) {
y <- copy(pheno)
test = pheno[s[, r]]$AnimalID
val_pheno <- pheno[match(test,AnimalID)]$ABT
y[AnimalID %in% test, "ABT"] = NA
y[,AnimalID := as.factor(AnimalID)]
y$poolID <- as.factor(y$poolID)
y$famID <- as.factor(y$famID)
ans_A <- mmer(
ABT ~ 1 + poolID,
random =  ~ vs(AnimalID, Gu = A),
rcov =  ~ units,
data = y)
ans_A$U$`u:AnimalID`$ABT <-as.data.frame(ans_A$U$`u:AnimalID`$ABT)
rownames(ans_A$U$`u:AnimalID`$ABT) <-gsub("AnimalID", "", rownames(ans_A$U$`u:AnimalID`$ABT))
Y_A <- ans_A$U$`u:AnimalID`$ABT[test, ]
##预测准确性
rep_accuracyA[r, i] <- (cor(Y_A, val_pheno, use = "complete"))/sqrt(h2)
##偏差
numerator_A <- sum((Y_A-mean(Y_A))*(val_pheno-mean(val_pheno)))
denomirator_A <- sum((Y_A-mean(Y_A))^2)
reg_A[r, i] <- numerator_A/denomirator_A
####GBLUP
ans_G <- mmer(
ABT ~ 1 +poolID,
random =  ~ vs(AnimalID, Gu = G),
rcov =  ~ units,
data = y)
ans_G$U$`u:AnimalID`$ABT <-as.data.frame(ans_G$U$`u:AnimalID`$ABT)
rownames(ans_G$U$`u:AnimalID`$ABT) <-gsub("AnimalID", "", rownames(ans_G$U$`u:AnimalID`$ABT))
Y_G <- ans_G$U$`u:AnimalID`$ABT[test, ]
rep_accuracyG[r, i] <- (cor(Y_G, val_pheno, use = "complete"))/sqrt(h2)
numerator_G <- sum((Y_G-mean(Y_G))*(val_pheno-mean(val_pheno)))
denomirator_G <- sum((Y_G-mean(Y_G))^2)
reg_G[r, i] <- numerator_G/denomirator_G
}
}
### 遗传力
h2 <- vpredict(ans_A, h2 ~ V1/(V1+V2))$Estimate[1]
###交叉验证
rep=5
fold_num <- 5
pheno <- copy(data)
y <- copy(pheno)
rep_accuracyA <-  matrix(nrow=fold_num, ncol=rep)
rep_accuracyG <-  matrix(nrow=fold_num, ncol=rep)
reg_A <- matrix(nrow=fold_num, ncol=rep)
reg_G <- matrix(nrow=fold_num, ncol=rep)
for(i in 1:rep) {
animal_pos <- seq(nrow(pheno))
s = matrix(sample(animal_pos, (floor(nrow(pheno) * (1/fold_num)) * fold_num)), ncol = fold_num)
for (r in 1:fold_num) {
y <- copy(pheno)
test = pheno[s[, r]]$AnimalID
val_pheno <- pheno[match(test,AnimalID)]$ABT
y[AnimalID %in% test, "ABT"] = NA
y[,AnimalID := as.factor(AnimalID)]
y$poolID <- as.factor(y$poolID)
y$famID <- as.factor(y$famID)
ans_A <- mmer(
ABT ~ 1 + poolID,
random =  ~ vs(AnimalID, Gu = A),
rcov =  ~ units,
data = y)
ans_A$U$`u:AnimalID`$ABT <-as.data.frame(ans_A$U$`u:AnimalID`$ABT)
rownames(ans_A$U$`u:AnimalID`$ABT) <-gsub("AnimalID", "", rownames(ans_A$U$`u:AnimalID`$ABT))
Y_A <- ans_A$U$`u:AnimalID`$ABT[test, ]
##预测准确性
rep_accuracyA[r, i] <- (cor(Y_A, val_pheno, use = "complete"))/sqrt(h2)
##偏差
numerator_A <- sum((Y_A-mean(Y_A))*(val_pheno-mean(val_pheno)))
denomirator_A <- sum((Y_A-mean(Y_A))^2)
reg_A[r, i] <- numerator_A/denomirator_A
####GBLUP
ans_G <- mmer(
ABT ~ 1 +poolID,
random =  ~ vs(AnimalID, Gu = G),
rcov =  ~ units,
data = y)
ans_G$U$`u:AnimalID`$ABT <-as.data.frame(ans_G$U$`u:AnimalID`$ABT)
rownames(ans_G$U$`u:AnimalID`$ABT) <-gsub("AnimalID", "", rownames(ans_G$U$`u:AnimalID`$ABT))
Y_G <- ans_G$U$`u:AnimalID`$ABT[test, ]
rep_accuracyG[r, i] <- (cor(Y_G, val_pheno, use = "complete"))/sqrt(h2)
numerator_G <- sum((Y_G-mean(Y_G))*(val_pheno-mean(val_pheno)))
denomirator_G <- sum((Y_G-mean(Y_G))^2)
reg_G[r, i] <- numerator_G/denomirator_G
}
}
rm(list = ls())
print("-----------classical_cross_validation(Rdata).R output begin--------------")
################################################################################
input_path= "/home/liang/Documents/AquaGS_GUI/Output/Rbuffer.Rdata"
output_path = "/home/liang/Documents/AquaGS_GUI/Output/classical_accuracy.csv"
AnimalID_index = 1
target_index = 9
method_flag = 1
fixed_num = 2
fixed_index = c(5,6)
random_num = 1
random_index = c(8)
rep = 2
fold_num = 1
require(data.table)
#data = read.csv(input_path)
load(input_path)
col_list = colnames(data)
target_item = col_list[target_index]
AnimalID_item = col_list[AnimalID_index]
paste("target_item:",target_item)
paste("AnimalID_item:",AnimalID_item)
fixed_part_pama = ""
if(fixed_num)
{
for(i in fixed_index){
fixed_part_pama = paste(fixed_part_pama,col_list[i],"+",sep="")
#pama = paste("data$",col_list[i],"<-","as.factor(data$",col_list[i],")",sep = "")
#eval(parse(text = pama))
}
fixed_part_pama = substr(fixed_part_pama,1,nchar(fixed_part_pama)-1)#delete the final "+"
}
paste("fixed_part_pama:",fixed_part_pama)
random_part_pama = ""
if(random_num)
{
for(i in random_index){
random_part_pama = paste(random_part_pama,col_list[i],"+",sep="")
pama = paste("data$",col_list[i],"<-","as.factor(data$",col_list[i],")",sep = "")
eval(parse(text = pama))
}
random_part_pama = substr(random_part_pama,1,nchar(random_part_pama)-1)#delete the final "+"
}
paste("random_part_pama:",random_part_pama)
pheno <- copy(data)
y <- copy(pheno)
library(sommer)
rep_accuracyA <-  matrix(nrow=fold_num, ncol=rep)
reg_A <- matrix(nrow=fold_num, ncol=rep)
for(i in 1:rep) {
animal_pos <- seq(nrow(pheno))
s = matrix(sample(animal_pos, (floor(nrow(pheno) * (1/fold_num)) * fold_num)), ncol = fold_num)
for (r in 1:fold_num) {
y <- copy(pheno)
#test = pheno[s[, r]]$AnimalID
pama = paste("test = pheno[s[, r]]$",AnimalID_item,sep = "")
print(pama)
eval(parse(text = pama))
#val_pheno <- pheno[match(test,AnimalID)]$ABT
pama = paste("val_pheno = pheno[match(test,",AnimalID_item,")]$",target_item,sep = "")
print(pama)
eval(parse(text = pama))
#y[AnimalID %in% test, "ABT_t"] = NA
pama = paste("y[",AnimalID_item, " %in% test,","\"",target_item,"\"","]= NA",sep = "")
print(pama)
eval(parse(text = pama))
#y[,AnimalID := as.factor(AnimalID)]
pama = paste("y[,",AnimalID_item, " := as.factor(",AnimalID_item,")]",sep = "")
print(pama)
eval(parse(text = pama))
y$poolID <- as.factor(y$poolID)
y$famID <- as.factor(y$famID)
#ans_A <- mmer(ABT_t ~ 1 + poolID,
#              random =  ~ vs(AnimalID, Gu = A),
#              rcov =  ~ units,
#             data = y)
if(random_num){
if(method_flag)
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = G)+",random_part_pama,","
,"rcov = ~ units, data = y)",sep="")
}else
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = A)+",random_part_pama,","
,"rcov = ~ units, data = y)",sep="")
}
}else{
if(method_flag)
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = G),"
,"rcov = ~ units, data = y)",sep="")
}else
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = A),"
,"rcov = ~ units, data = y)",sep="")
}
}
print(pama)
eval(parse(text = pama))
#ans_A$U$`u:AnimalID`$ABT_t <-as.data.frame(ans_A$U$`u:AnimalID`$ABT_t)
pama = paste("ans_A$U$`u:",AnimalID_item,"`$",target_item,"<-as.data.frame(ans_A$U$`u:",AnimalID_item,"`$",target_item,")",sep = "")
print(pama)
eval(parse(text = pama))
#rownames(ans_A$U$`u:AnimalID`$ABT_t) <-gsub("AnimalID", "", rownames(ans_A$U$`u:AnimalID`$ABT_t))
pama = paste("rownames(ans_A$U$`u:",AnimalID_item,"`$",target_item,")","<-gsub(\"AnimalID\",","\"\",","rownames(ans_A$U$`u:",AnimalID_item,"`$",target_item,"))",sep = "")
print(pama)
eval(parse(text = pama))
#Y_A <- ans_A$U$`u:AnimalID`$ABT_t[test, ]
pama = paste("Y_A <- ans_A$U$`u:",AnimalID_item,"`$",target_item,"[test,]",sep = "")
print(pama)
eval(parse(text = pama))
rep_accuracyA[r, i] <- (cor(Y_A, val_pheno, use = "complete"))/sqrt(h2)
numerator_A <- sum((Y_A-mean(Y_A))*(val_pheno-mean(val_pheno)))
denomirator_A <- sum((Y_A-mean(Y_A))^2)
reg_A[r, i] <- numerator_A/denomirator_A
}
}
ans_A <- mmer(ABT_t~ 1 + poolID+famID,
random = ~ vs(AnimalID, Gu = G)+WW,
rcov = ~ units,
data = y)
ans_A <- mmer(
ABT_t~ 1 + poolID+famID,
random = ~ vs(AnimalID, Gu = A)+WW,
rcov = ~ units,
data = y)
ans_A <- mmer(
ABT_t~ 1 + poolID+famID,
random = ~ vs(AnimalID, Gu = A)+WW,
rcov = ~ units,
data = data)
ans_A <- mmer(
ABT_t~ 1 + poolID+famID,
random = ~ vs(AnimalID, Gu = A)+WW,
rcov = ~ units,
data = data)
ans_G <- mmer(
ABT ~ 1 +poolID,
random =  ~ vs(AnimalID, Gu = G),
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G),
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G)+ww,
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G)+WW,
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT_t ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G)+WW,
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G)+WW,
rcov =  ~ units,
data = y)
ans_G <- mmer(
ABT_t ~ 1 +poolID+famID,
random =  ~ vs(AnimalID, Gu = G)+WW,
rcov =  ~ units,
data = y)
################################################################################
input_path= "/home/liang/Documents/AquaGS_GUI/Output/Rbuffer.Rdata"
output_path = "/home/liang/Documents/AquaGS_GUI/Output/classical_accuracy.csv"
AnimalID_index = 1
target_index = 8
method_flag = 1
fixed_num = 2
fixed_index = c(5,6)
random_num = 1
random_index = c(8)
rep = 2
fold_num = 1
require(data.table)
#data = read.csv(input_path)
load(input_path)
col_list = colnames(data)
target_item = col_list[target_index]
AnimalID_item = col_list[AnimalID_index]
paste("target_item:",target_item)
paste("AnimalID_item:",AnimalID_item)
fixed_part_pama = ""
if(fixed_num)
{
for(i in fixed_index){
fixed_part_pama = paste(fixed_part_pama,col_list[i],"+",sep="")
#pama = paste("data$",col_list[i],"<-","as.factor(data$",col_list[i],")",sep = "")
#eval(parse(text = pama))
}
fixed_part_pama = substr(fixed_part_pama,1,nchar(fixed_part_pama)-1)#delete the final "+"
}
paste("fixed_part_pama:",fixed_part_pama)
random_part_pama = ""
if(random_num)
{
for(i in random_index){
random_part_pama = paste(random_part_pama,col_list[i],"+",sep="")
pama = paste("data$",col_list[i],"<-","as.factor(data$",col_list[i],")",sep = "")
eval(parse(text = pama))
}
random_part_pama = substr(random_part_pama,1,nchar(random_part_pama)-1)#delete the final "+"
}
paste("random_part_pama:",random_part_pama)
pheno <- copy(data)
y <- copy(pheno)
library(sommer)
rep_accuracyA <-  matrix(nrow=fold_num, ncol=rep)
reg_A <- matrix(nrow=fold_num, ncol=rep)
for(i in 1:rep) {
animal_pos <- seq(nrow(pheno))
s = matrix(sample(animal_pos, (floor(nrow(pheno) * (1/fold_num)) * fold_num)), ncol = fold_num)
for (r in 1:fold_num) {
y <- copy(pheno)
#test = pheno[s[, r]]$AnimalID
pama = paste("test = pheno[s[, r]]$",AnimalID_item,sep = "")
print(pama)
eval(parse(text = pama))
#val_pheno <- pheno[match(test,AnimalID)]$ABT
pama = paste("val_pheno = pheno[match(test,",AnimalID_item,")]$",target_item,sep = "")
print(pama)
eval(parse(text = pama))
#y[AnimalID %in% test, "ABT_t"] = NA
pama = paste("y[",AnimalID_item, " %in% test,","\"",target_item,"\"","]= NA",sep = "")
print(pama)
eval(parse(text = pama))
#y[,AnimalID := as.factor(AnimalID)]
pama = paste("y[,",AnimalID_item, " := as.factor(",AnimalID_item,")]",sep = "")
print(pama)
eval(parse(text = pama))
#y$poolID <- as.factor(y$poolID)
#y$famID <- as.factor(y$famID)
#ans_A <- mmer(ABT_t ~ 1 + poolID,
#              random =  ~ vs(AnimalID, Gu = A),
#              rcov =  ~ units,
#             data = y)
if(random_num){
if(method_flag)
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = G)+",random_part_pama,","
,"rcov = ~ units, data = y)",sep="")
}else
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = A)+",random_part_pama,","
,"rcov = ~ units, data = y)",sep="")
}
}else{
if(method_flag)
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = G),"
,"rcov = ~ units, data = y)",sep="")
}else
{
pama =paste(" ans_A <- mmer(",target_item,"~ 1 + ",fixed_part_pama,","
,"random = ~ vs(",AnimalID_item,", Gu = A),"
,"rcov = ~ units, data = y)",sep="")
}
}
print(pama)
eval(parse(text = pama))
#ans_A$U$`u:AnimalID`$ABT_t <-as.data.frame(ans_A$U$`u:AnimalID`$ABT_t)
pama = paste("ans_A$U$`u:",AnimalID_item,"`$",target_item,"<-as.data.frame(ans_A$U$`u:",AnimalID_item,"`$",target_item,")",sep = "")
print(pama)
eval(parse(text = pama))
#rownames(ans_A$U$`u:AnimalID`$ABT_t) <-gsub("AnimalID", "", rownames(ans_A$U$`u:AnimalID`$ABT_t))
pama = paste("rownames(ans_A$U$`u:",AnimalID_item,"`$",target_item,")","<-gsub(\"AnimalID\",","\"\",","rownames(ans_A$U$`u:",AnimalID_item,"`$",target_item,"))",sep = "")
print(pama)
eval(parse(text = pama))
#Y_A <- ans_A$U$`u:AnimalID`$ABT_t[test, ]
pama = paste("Y_A <- ans_A$U$`u:",AnimalID_item,"`$",target_item,"[test,]",sep = "")
print(pama)
eval(parse(text = pama))
rep_accuracyA[r, i] <- (cor(Y_A, val_pheno, use = "complete"))/sqrt(h2)
numerator_A <- sum((Y_A-mean(Y_A))*(val_pheno-mean(val_pheno)))
denomirator_A <- sum((Y_A-mean(Y_A))^2)
reg_A[r, i] <- numerator_A/denomirator_A
}
}
rownames(geno_012_matrix) <- geno_012_DT$IID
load("/home/liang/Desktop/Rbuffer.Rdata")
View(A_dense)
rownames(geno_012_matrix) <- geno_012_DT$IID
rdata_path = "/home/liang/Desktop/Rbuffer.Rdata"
G_matrix_path = "/home/liang/Desktop/G_matrix.txt"
if(require(data.table)){
print("data.table is loaded correctly")
} else {
print("trying to install data.table")
install.packages("data.table")
if(require(data.table)){
print("data.table installed and loaded")
} else {
stop("could not install data.table")
}
}
#require(nadiv)
if(require(nadiv)){
print("nadiv is loaded correctly")
} else {
print("trying to install nadiv")
install.packages("nadiv")
if(require(nadiv)){
print("nadiv installed and loaded")
} else {
stop("could not install nadiv")
}
}
#require(sommer)
if(require(sommer)){
print("sommer is loaded correctly")
} else {
print("trying to install sommer")
install.packages("sommer")
if(require(sommer)){
print("sommer installed and loaded")
} else {
stop("could not install sommer")
}
}
load(rdata_path)
#col_list = colnames(data)
geno_012_matrix <- as.matrix(geno_012_DT[, -1:-6])
geno_sommer_matrix <- geno_012_matrix - 1
id_g = geno_012_DT$IID
View(geno_012_DT)
View(geno_012_matrix)
#col_list = colnames(data)
geno_012_matrix <- as.matrix(geno_012_DT[, -1:-6])
geno_sommer_matrix <- geno_012_matrix - 1
id_g = geno_012_DT$IID
G <- A.mat(geno_sommer_matrix) # additive relationship matrix
colnames(G) <- rownames(G) <-  id_g
dim(G)
rm(list = ls())
rdata_path = "/home/liang/Desktop/Rbuffer.Rdata"
G_matrix_path = "/home/liang/Desktop/G_matrix.txt"
if(require(data.table)){
print("data.table is loaded correctly")
} else {
print("trying to install data.table")
install.packages("data.table")
if(require(data.table)){
print("data.table installed and loaded")
} else {
stop("could not install data.table")
}
}
#require(nadiv)
if(require(nadiv)){
print("nadiv is loaded correctly")
} else {
print("trying to install nadiv")
install.packages("nadiv")
if(require(nadiv)){
print("nadiv installed and loaded")
} else {
stop("could not install nadiv")
}
}
#require(sommer)
if(require(sommer)){
print("sommer is loaded correctly")
} else {
print("trying to install sommer")
install.packages("sommer")
if(require(sommer)){
print("sommer installed and loaded")
} else {
stop("could not install sommer")
}
}
load(rdata_path)
#col_list = colnames(data)
geno_012_matrix <- as.matrix(geno_012_DT[, -1:-6])
geno_sommer_matrix <- geno_012_matrix - 1
id_g = geno_012_DT$IID
G <- A.mat(geno_sommer_matrix) # additive relationship matrix
colnames(G) <- rownames(G) <-  id_g
dim(G)
G_dt <- as.data.table(G,keep.rownames = T)
setnames(G_dt,"rn",AnimalID_item)
fwrite(G_dt,file = G_matrix_path,sep = " ",col.names = F)
#######################   ##################################################
G[1:5,1:5]
#######################    ##################################################
save.image(file = rdata_path)
rdata_path
print("-----------G_matirx_build.R output end--------------")
